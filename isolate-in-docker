#!/usr/bin/env bash
## This file is not meant to be executed directly.
## It should be executed via a symlink, named the same as the executable you wish to execute inside the Docker image.

## Documentation at https://github.com/hugojosefson/isolate-in-docker#readme

# Fail on any error
set -e

# Numeric booleans, for legibility
true=0
false=1

# Does the file exist and is readable to us, or is a symlink to such a file?
function fileExists() {
  local target="${1}"

  [[ ! -r "${target}" ]] && return ${false}
  [[ -f "${target}" ]] && return ${true}
  [[ -L "${target}" ]] && return fileExists "$(readlink -f ${target})"

  return false
}

function sourceFileIfExists() {
  if fileExists "${1}"; then
    echo Sourcing "${1}" >&2
    . "${1}"
  fi
}

function sourceConfigIfExists() {
  sourceFileIfExists "${1}/${2}.rc"
}

function getDockerExecutable() {
  echo "${DOCKER_EXECUTABLE:-$(basename "${0}")}"
}

function getDockerWorkdir() {
  local possiblyRelativeWorkdir="${DOCKER_WORKDIR:-$(pwd)}"
  echo "$(cd ${possiblyRelativeWorkdir} && pwd)"
}

function getCacheIdentifier() {
  if [[ ! -z "${CACHE_IDENTIFIER}" ]]; then
    echo "${CACHE_IDENTIFIER}"
  else
    local workdir="$(getDockerWorkdir)"
    local cleanedUp="$(echo "${workdir}" | sed -r "s/[^a-z0-9+@=.-]/_/gi")"
    local hash="$(echo "${workdir}" | md5sum | cut -d ' ' -f 1)"
    echo ${cleanedUp}_${hash}
  fi
}

function getConfigBase() {
  echo "${CONFIG_BASE:-${HOME}/.config/isolate-in-docker/$(getDockerImage | withoutTag)}"
}

function readConfigFiles() {
  local configDir="${configDir:-$(getConfigBase)/$(getCacheIdentifier)}"
  mkdir -p "${configDir}"
  sourceConfigIfExists "${configDir}" "default"
  sourceConfigIfExists "${configDir}" "$(basename $(getDockerExecutable))"
}

function getDockerUser() {
  echo ${DOCKER_USER:-"$(id -u)":"$(id -g)"}
}

function getCacheBase() {
  echo "${CACHE_BASE:-${HOME}/.cache/isolate-in-docker/$(getDockerImage | withoutTag)}"
}

function getCacheDir() {
  echo "${CACHE_DIR:-$(getCacheBase)/$(getCacheIdentifier)}"
}

function withoutTag() {
  echo "$1" | sed -r 's/:[^:]+$//g'
}

function getDockerImage() {
  if [[ ! -z "${DOCKER_IMAGE}" ]]; then
    echo "${DOCKER_IMAGE}"
  elif [[ "$(getDockerExecutable)" =~ ^(node|npm|npx|yarn)$ ]]; then
    echo "node:${NODE_VERSION:-lts}"
  elif [[ "$(getDockerExecutable)" =~ ^(webstorm|bash)$ ]]; then
    echo "hugojosefson/webstorm"
  elif [[ "$(getDockerExecutable)" =~ ^heroku$ ]]; then
    echo "dickeyxxx/heroku-cli"
  elif [[ "$(getDockerExecutable)" =~ ^isolate-in-docker$ ]]; then
    echo "This script is meant to be executed via a symlink. \
Please see https://github.com/hugojosefson/isolate-in-docker#readme for installation instructions." >&2
    exit 1
  else
    echo "Unknown DOCKER_EXECUTABLE=$(getDockerExecutable)" >&2
    exit 1
  fi
}

# Configurable env variables
readConfigFiles

DOCKER_IMAGE="$(getDockerImage)"
DOCKER_USER=$(getDockerUser)
DOCKER_WORKDIR="$(getDockerWorkdir)"
DOCKER_EXECUTABLE="$(getDockerExecutable)"
DOCKER_EXTRA_ARGS="${DOCKER_EXTRA_ARGS:-}"

CACHE_DIR="$(getCacheDir)"

# Are we in a TTY?
function isTTY() {
  if [[ -t 1 ]]; then
    return ${true}
  else
    return ${false}
  fi
}

# Write current git user config to ${CACHE_DIR}/home, so it is visible inside the Docker container.
function writeGitUserToConfig() {
  local gitEmail="$(git config user.email)"
  local gitName="$(git config user.name)"

  gitConfigFile="$(getCacheDir)/home/.gitconfig"
  mkdir -p "$(dirname ${gitConfigFile})"
  touch "${gitConfigFile}"
  git config --file "${gitConfigFile}" --unset-all user.email || true
  git config --file "${gitConfigFile}" --unset-all user.name || true
  git config --file "${gitConfigFile}" --add user.email "${gitEmail}"
  git config --file "${gitConfigFile}" --add user.name "${gitName}"
}

# Program starts here
if isTTY; then
  TTY_ARG="--tty"
else
  TTY_ARG=""
fi

writeGitUserToConfig

if [[ ! -z "${PORT}" ]]; then
  PORT_ARGS="--env PORT=${PORT} --publish ${PORT}:${PORT}"
else
  PORT_ARGS=""
fi

docker run \
  --rm \
  --interactive \
  ${TTY_ARG} \
  --user ${DOCKER_USER} \
  --workdir "${DOCKER_WORKDIR}" \
  --volume "${DOCKER_WORKDIR}":"${DOCKER_WORKDIR}" \
  --volume "${CACHE_DIR}/home":"${HOME}" \
  --env HOME="${HOME}" \
  --volume /tmp/.X11-unix:/tmp/.X11-unix \
  --env DISPLAY="$DISPLAY" \
  ${PORT_ARGS} \
  ${DOCKER_EXTRA_ARGS} \
  ${DOCKER_IMAGE} \
  ${DOCKER_EXECUTABLE} "$@"
