#!/usr/bin/env bash
## This file is not meant to be executed directly.
## It should be executed via a symlink, named the same as the executable you wish to execute inside the Docker image.

## Documentation at https://github.com/hugojosefson/isolate-in-docker#readme

# Fail on any error
set -e

# Numeric booleans, for legibility
true=0
false=1

# Default, if none specified in ./.nvmrc nor in $NODE_VERSION
DEFAULT_NODE_VERSION=latest

# Print docker arguments for allowing the container to access the host's docker engine, in case $DOCKERCEPTION is set.
function maybeDockerception() {
  [[ -z "${DOCKERCEPTION}" ]] && return

  local docker_sock="$(docker context inspect -f '{{.Endpoints.docker.Host}}' | sed -E 's/^unix:\/\///')"
  local docker_sock_gid="$(stat -c '%g' "${docker_sock}")"
  local docker_bin="$(command -v docker)"

  echo "--group-add "${docker_sock_gid}" \
    -v "${docker_sock}":"${docker_sock}" \
    -v "${docker_bin}":"${docker_bin}":ro \
  "
}

# Does the file exist and is readable to us, or is a symlink to such a file?
function fileExists() {
  local target="${1}"

  [[ ! -r "${target}" ]] && return ${false}
  [[ -f "${target}" ]] && return ${true}
  [[ -L "${target}" ]] && return fileExists "$(readlink -f ${target})"

  return false
}

function sourceFileIfExists() {
  if fileExists "${1}"; then
    echo Sourcing "${1}" >&2
    . "${1}"
  fi
}

function getLinkName() {
  basename "${0}"
}

function getDockerWorkdir() {
  local possiblyRelativeWorkdir="${DOCKER_WORKDIR:-$(pwd)}"
  echo "$(cd ${possiblyRelativeWorkdir} && pwd)"
}

function rand() {
  cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

function safeName() {
  cat \
  | sed -E 's/\n//g' \
  | sed -E 's/^\/$/root/' \
  | sed -E 's/^\/-/root-/' \
  | sed -E 's/^[^a-zA-Z0-9]+//' \
  | sed -E "s/[^a-zA-Z0-9_.-]/_/g"
}

function getConfigDirReadme() {
  echo "-------------------------------------------------------------------------------
Config dir for isolate-in-docker tools
when in: $(pwd)
-------------------------------------------------------------------------------

NOTE! This config directory is specific for $(pwd)
and used only when your current working directory is that directory!

You may create a file here for each tool you use (named as the symlink, with the
extension .rc, for example \"$(getLinkName).rc\"). If you do, it will be sourced
before running that tool.

You may declare environment variables in the configuration file. For details, see:
https://github.com/hugojosefson/isolate-in-docker#configuration-options

Additionally, if you create a file named \"default.rc\", it will be sourced
before all isolate-in-docker tools, before the specific tool's config file.
"
}

function readConfigFiles() {
  local configDir=".isolate-in-docker/config"
  mkdir -p "${configDir}"
  getConfigDirReadme > "${configDir}/README"
  sourceFileIfExists "${configDir}/default.rc"
  sourceFileIfExists "${configDir}/$(getLinkName).rc"
}

function getDockerUser() {
  echo ${DOCKER_USER:-"$(id -u)":"$(id -g)"}
}

function getNodeVersion() {
  if [[ -n "${NODE_VERSION}" ]]; then
    echo "${NODE_VERSION}"
    return
  fi

  local nvmrc_version="$(cat .nvmrc 2>/dev/null)"
  if [[ -n "${nvmrc_version}" ]]; then
    echo "${nvmrc_version}"
    return
  fi

  echo "${DEFAULT_NODE_VERSION}"
}

function getDockerCmd() {
  if [[ ! -z "${DOCKER_CMD}" ]]; then
    echo "${DOCKER_CMD}"
  elif [[ "$(getLinkName)" =~ ^(firefox40)$ ]]; then
    echo "/opt/firefox/firefox-bin --new-instance"
  elif [[ "$(getLinkName)" =~ ^(signal-desktop)$ ]]; then
    echo "signal-desktop --no-sandbox"
  else
    getLinkName
  fi
}

function getDockerImage() {
  if [[ ! -z "${DOCKER_IMAGE}" ]]; then
    echo "${DOCKER_IMAGE}"
  elif [[ "$(getLinkName)" =~ ^(node|npm|npx|yarn)$ ]]; then
    echo "--env NODE_ENV=${NODE_ENV} node:$(getNodeVersion)"
  elif [[ "$(getLinkName)" =~ ^(firefox40)$ ]]; then
    echo "\
      --device /dev/dri:/dev/dri \
      netcapsule/firefox \
    "
  elif [[ "$(getLinkName)" =~ ^(webstorm|webstorm-install-rust|clion)$ ]]; then
    echo "\
      --device /dev/dri:/dev/dri \
      --user root:root \
      --env USER_ID=$(id -u) \
      --env USER_NAME=$(id -un) \
      --env GROUP_ID=$(id -g) \
      --env GROUP_NAME=$(id -gn) \
      hugojosefson/webstorm \
    "
  elif [[ "$(getLinkName)" =~ ^(goland|jetbrains-toolbox)$ ]]; then
    echo "\
      --device /dev/dri:/dev/dri \
      --user root:root \
      --env USER_ID=$(id -u) \
      --env USER_NAME=$(id -un) \
      --env GROUP_ID=$(id -g) \
      --env GROUP_NAME=$(id -gn) \
      hugojosefson/goland \
    "
  elif [[ "$(getLinkName)" =~ ^(pulseUi)$ ]]; then
    echo "\
      --cap-add NET_ADMIN \
      --cap-add SYS_ADMIN \
      --cap-add MKNOD \
      --device /dev/net/tun:/dev/net/tun \
      --device /dev/dri:/dev/dri \
      --user root:root \
      --env USER_ID=$(id -u) \
      --env USER_NAME=$(id -un) \
      --env GROUP_ID=$(id -g) \
      --env GROUP_NAME=$(id -gn) \
      hugojosefson/pulsevpn \
    "
  elif [[ "$(getLinkName)" =~ ^(git-revise)$ ]]; then
    echo "-v "${HOME}/.gitconfig":"${HOME}/.gitconfig":ro hugojosefson/git-revise"
  elif [[ "$(getLinkName)" =~ ^(signal-desktop)$ ]]; then
    echo "\
      --device /dev/dri:/dev/dri \
      --user root:root \
      --env USER_ID=$(id -u) \
      --env USER_NAME=$(id -un) \
      --env GROUP_ID=$(id -g) \
      --env GROUP_NAME=$(id -gn) \
      hugojosefson/signal-desktop \
    "
  elif [[ "$(getLinkName)" =~ ^(aws)$ ]]; then
    echo "mikesir87/aws-cli"
  elif [[ "$(getLinkName)" =~ ^(heroku)$ ]]; then
    echo "dickeyxxx/heroku-cli"
  elif [[ "$(getLinkName)" =~ ^(mvn|jaotc|jar|jarsigner|java|javac|javadoc|javap|jcmd|jconsole|jdb|jdeprscan|jdeps|jhsdb|jimage|jinfo|jjs|jlink|jmap|jmod|jps|jrunscript|jshell|jstack|jstat|jstatd|keytool|pack200|rmic|rmid|rmiregistry|serialver|unpack200)$ ]]; then
    echo "\
      --device /dev/urandom:/dev/urandom \
      maven \
    "
  elif [[ "$(getLinkName)" =~ ^(cargo|cargo-clippy|cargo-fmt|cargo-miri|clippy-driver|rls|rust-gdb|rust-lldb|rustc|rustdoc|rustfmt|rustup)$ ]]; then
    echo "rust"
  else
    echo "Unknown symlink name: \'$(getLinkName)\'" >&2
    exit 1
  fi
}

# Are we in a TTY?
function isTTY() {
  if [ -t 0 ]; then
    return ${true}
  else
    return ${false}
  fi
}

# Are they running husky?
function isHusky() {
  if [[ "$@" =~ 'node_modules/husky/run.js' ]]; then
    return ${true}
  else
    return ${false}
  fi
}

# Do we have git installed?
function haveGit() {
  command -v git >/dev/null
}

# Is the current directory a git repo?
function isGitRepo() {
  [[ -d ".git" ]]
}

# Write current git user config to .isolate-in-docker/home/.gitconfig, so it is visible inside the Docker container.
function writeGitUserToConfig() {
  local gitEmail="$(git config user.email)"
  local gitName="$(git config user.name)"

  gitConfigFile=".isolate-in-docker/home/.gitconfig"
  mkdir -p "$(dirname ${gitConfigFile})"
  touch "${gitConfigFile}"
  git config --file "${gitConfigFile}" --unset-all user.email || true
  git config --file "${gitConfigFile}" --unset-all user.name || true
  git config --file "${gitConfigFile}" --add user.email "${gitEmail}"
  git config --file "${gitConfigFile}" --add user.name "${gitName}"
}

function ensureInFile() {
  local file="${1}"
  local line="${2}"
  if ! grep -x "${line}" "${file}" >/dev/null; then
    echo >> "${file}"
    echo "${line}" >> "${file}"
  fi
}

function exists() {
  local target="${1}"
  ls -d "${target}" >/dev/null 2>&1
}

# Migrates any symlinked directories from previous versions of isolate-in-docker
function migrateIfSymlink() {
  local name="${1}"
  if [[ -L "${name}" ]]; then
    local targetDir="$(readlink -f "${name}")"
    if [[ -d "${targetDir}" ]]; then
      rm -f "${name}"
      mv "${targetDir}" "${name}"
    else
      mv "${name}" "${name}.old"
    fi
  elif exists "${name}" && [[ ! -d "${name}" ]]; then
      mv "${name}" "${name}.old"
  fi
}

# Creates a directory .isolate-in-docker, with home and config.
function createIsolation() {
  if isGitRepo; then
    ensureInFile .git/info/exclude .isolate-in-docker/
  fi

  migrateIfSymlink .isolate-in-docker/home
  migrateIfSymlink .isolate-in-docker/config

  mkdir -p .isolate-in-docker/empty
  mkdir -p .isolate-in-docker/home
  mkdir -p .isolate-in-docker/config

  if isGitRepo && haveGit; then
    writeGitUserToConfig
  fi
}

# Check how we were called
if [[ "$(basename "${0}")" == "$(basename $(readlink -f ${0}))" ]]; then
    echo "This script is meant to be executed via a symlink. \
Please see https://github.com/hugojosefson/isolate-in-docker#readme for installation instructions." >&2
    exit 1
fi

# Program starts here
createIsolation

# Configurable env variables
readConfigFiles

DOCKER_IMAGE="$(getDockerImage)"
DOCKER_USER=$(getDockerUser)
DOCKER_WORKDIR="$(getDockerWorkdir)"
DOCKER_CMD="$(getDockerCmd)"
DOCKER_EXTRA_ARGS="${DOCKER_EXTRA_ARGS:-}"
DOCKER_HOSTNAME="${DOCKER_HOSTNAME:-${DOCKER_NAME:-$(basename "${DOCKER_WORKDIR}" | safeName)}}"
DOCKER_NAME="${DOCKER_NAME:-$(echo $(basename "${DOCKER_WORKDIR}")-$(date --utc --iso-8601=seconds | sed -E 's/://g' | sed -E 's/\+0000/Z/g')-$(rand 4) | safeName)}"
DOCKER_NET="${DOCKER_NET:-host}"

if isTTY && ! isHusky "$@"; then
  TTY_ARG="--tty"
else
  TTY_ARG=""
fi

if [[ ! -z "${PORT}" ]]; then
  PORT_ARGS="--env PORT=${PORT}"
else
  PORT_ARGS=""
fi

if [[ "${DOCKER_WORKDIR}" == "/" ]]; then
  DOCKER_WORKDIR_ARGS="--workdir /host-root --volume /:/host-root"
else
  mkdir -p ".isolate-in-docker/home${DOCKER_WORKDIR#"$HOME"}"
  DOCKER_WORKDIR_ARGS="--workdir ${DOCKER_WORKDIR} --volume ${DOCKER_WORKDIR}:${DOCKER_WORKDIR}"
fi

exec docker run \
  --rm \
  --interactive \
  --init \
  -a stdin -a stdout -a stderr \
  ${TTY_ARG} \
  --name "${DOCKER_NAME}" \
  --hostname "${DOCKER_HOSTNAME}" \
  --user ${DOCKER_USER} \
  ${DOCKER_WORKDIR_ARGS} \
  --volume "$(pwd)/.isolate-in-docker/empty":"$(pwd)/.isolate-in-docker":ro \
  --volume "$(pwd)/.isolate-in-docker/home":"${HOME}" \
  --env HOME="${HOME}" \
  --volume /tmp/.X11-unix:/tmp/.X11-unix \
  --env DISPLAY="${DISPLAY}" \
  ${PORT_ARGS} \
  $(maybeDockerception) \
  --net="${DOCKER_NET}" \
  ${DOCKER_EXTRA_ARGS} \
  ${DOCKER_IMAGE} \
  ${DOCKER_CMD} "$@"
