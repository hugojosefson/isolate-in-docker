#!/usr/bin/env bash
## This file is not meant to be executed directly.
## It should be executed via a symlink, named the same as the executable you wish to execute inside the Docker image.

## Documentation at https://github.com/hugojosefson/isolate-in-docker#readme

# Fail on any error
set -e

# Numeric booleans, for legibility
true=0
false=1

# Does the file exist and is readable to us, or is a symlink to such a file?
function fileExists() {
  local target="${1}"

  [[ ! -r "${target}" ]] && return ${false}
  [[ -f "${target}" ]] && return ${true}
  [[ -L "${target}" ]] && return fileExists "$(readlink -f ${target})"

  return false
}

function sourceFileIfExists() {
  if fileExists "${1}"; then
    echo Sourcing "${1}" >&2
    . "${1}"
  fi
}

function sourceConfigIfExists() {
  sourceFileIfExists "${1}/${2}.rc"
}

function getLinkName() {
  basename "${0}"
}

function getDockerCmd() {
  echo "${DOCKER_CMD:-$(getLinkName)}"
}

function getDockerWorkdir() {
  local possiblyRelativeWorkdir="${DOCKER_WORKDIR:-$(pwd)}"
  echo "$(cd ${possiblyRelativeWorkdir} && pwd)"
}

function safeName() {
  cat \
  | sed -r 's/\n//g' \
  | sed -r 's/^\/$/root/' \
  | sed -r 's/^\/-/root-/' \
  | sed -r 's/^[^a-zA-Z0-9]+//' \
  | sed -r "s/[^a-zA-Z0-9_.-]/_/g"
}

function getCacheIdentifier() {
  if [[ ! -z "${CACHE_IDENTIFIER}" ]]; then
    echo "${CACHE_IDENTIFIER}"
  else
    local workdir="$(getDockerWorkdir)"
    local cleanedUp="$(echo "${workdir}" | safeName)"
    local hash="$(echo ${workdir} | md5sum | cut -d ' ' -f 1)"
    echo ${cleanedUp}_${hash}
  fi
}

function getConfigBase() {
  echo "${CONFIG_BASE:-${HOME}/.config/isolate-in-docker/$(getDockerImage | withoutTag)}"
}

function readConfigFiles() {
  local configDir="${configDir:-$(getConfigBase)/$(getCacheIdentifier)}"
  mkdir -p "${configDir}"
  sourceConfigIfExists "${configDir}" "default"
  sourceConfigIfExists "${configDir}" "$(basename $(getDockerCmd))"
}

function getDockerUser() {
  echo ${DOCKER_USER:-"$(id -u)":"$(id -g)"}
}

function getCacheBase() {
  echo "${CACHE_BASE:-${HOME}/.cache/isolate-in-docker/$(getDockerImage | withoutTag)}"
}

function getCacheDir() {
  echo "${CACHE_DIR:-$(getCacheBase)/$(getCacheIdentifier)}"
}

function withoutTag() {
  echo "$1" | sed -r 's/:[^:]+$//g'
}

function getDockerImage() {
  if [[ ! -z "${DOCKER_IMAGE}" ]]; then
    echo "${DOCKER_IMAGE}"
  elif [[ "$(getLinkName)" =~ ^(node|npm|npx|yarn)$ ]]; then
    echo "node:${NODE_VERSION:-lts}"
  elif [[ "$(getLinkName)" =~ ^(webstorm|jetbrains-toolbox)$ ]]; then
    echo "\
      --device /dev/dri:/dev/dri \
      --user root:root \
      --env USER_ID=$(id -u) \
      --env USER_NAME=$(id -un) \
      --env GROUP_ID=$(id -g) \
      --env GROUP_NAME=$(id -gn) \
      hugojosefson/webstorm \
    "
  elif [[ "$(getLinkName)" =~ ^(aws)$ ]]; then
    echo "mikesir87/aws-cli"
  elif [[ "$(getLinkName)" =~ ^(heroku)$ ]]; then
    echo "dickeyxxx/heroku-cli"
  else
    echo "Unknown symlink name: \'$(getLinkName)\'" >&2
    exit 1
  fi
}

# Check how we were called
if [[ "$(basename "${0}")" == "$(basename $(readlink -f ${0}))" ]]; then
    echo "This script is meant to be executed via a symlink. \
Please see https://github.com/hugojosefson/isolate-in-docker#readme for installation instructions." >&2
    exit 1
fi

# Configurable env variables
readConfigFiles

DOCKER_IMAGE="$(getDockerImage)"
DOCKER_USER=$(getDockerUser)
DOCKER_WORKDIR="$(getDockerWorkdir)"
DOCKER_CMD="$(getDockerCmd)"
DOCKER_EXTRA_ARGS="${DOCKER_EXTRA_ARGS:-}"
DOCKER_HOSTNAME="${DOCKER_HOSTNAME:-${DOCKER_NAME:-$(basename "${DOCKER_WORKDIR}" | safeName)}}"
DOCKER_NAME="${DOCKER_NAME:-$(echo $(basename "${DOCKER_WORKDIR}")-$(date --utc --iso-8601=seconds | sed -r 's/://g' | sed -r 's/\+0000/Z/g') | safeName)}"

CACHE_DIR="$(getCacheDir)"

# Are we in a TTY?
function isTTY() {
  if [[ -t 1 ]]; then
    return ${true}
  else
    return ${false}
  fi
}

# Are they running husky?
function isHusky() {
  if [[ "$@" =~ 'node_modules/husky/run.js' ]]; then
    return ${true}
  else
    return ${false}
  fi
}

# Do we have git installed?
function haveGit() {
  command -v git >/dev/null
}

# Is current directory a git repo?
function isGitRepo() {
  [[ -d ".git" ]]
}

# Write current git user config to ${CACHE_DIR}/home, so it is visible inside the Docker container.
function writeGitUserToConfig() {
  local gitEmail="$(git config user.email)"
  local gitName="$(git config user.name)"

  gitConfigFile="$(getCacheDir)/home/.gitconfig"
  mkdir -p "$(dirname ${gitConfigFile})"
  touch "${gitConfigFile}"
  git config --file "${gitConfigFile}" --unset-all user.email || true
  git config --file "${gitConfigFile}" --unset-all user.name || true
  git config --file "${gitConfigFile}" --add user.email "${gitEmail}"
  git config --file "${gitConfigFile}" --add user.name "${gitName}"
}

# Program starts here
if isTTY && ! isHusky "$@"; then
  TTY_ARG="--tty"
else
  TTY_ARG=""
fi

haveGit && isGitRepo && writeGitUserToConfig

if [[ ! -z "${PORT}" ]]; then
  PORT_ARGS="--env PORT=${PORT} --publish ${PORT}:${PORT}"
else
  PORT_ARGS=""
fi

if [[ "${DOCKER_WORKDIR}" == "/" ]]; then
  DOCKER_WORKDIR_ARGS="--workdir /host-root --volume /:/host-root"
else
  DOCKER_WORKDIR_ARGS="--workdir ${DOCKER_WORKDIR} --volume ${DOCKER_WORKDIR}:${DOCKER_WORKDIR}"
fi

exec docker run \
  --rm \
  --interactive \
  -a stdin -a stdout -a stderr \
  ${TTY_ARG} \
  --name "${DOCKER_NAME}" \
  --hostname "${DOCKER_HOSTNAME}" \
  --user ${DOCKER_USER} \
  ${DOCKER_WORKDIR_ARGS} \
  --volume "${CACHE_DIR}/home":"${HOME}" \
  --env HOME="${HOME}" \
  --volume /tmp/.X11-unix:/tmp/.X11-unix \
  --env DISPLAY="$DISPLAY" \
  ${PORT_ARGS} \
  ${DOCKER_EXTRA_ARGS} \
  ${DOCKER_IMAGE} \
  ${DOCKER_CMD} "$@"
